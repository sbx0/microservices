<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.sbx0.microservices.uno.mapper.GameRoomUserMapper">
    <insert id="atomSave">
        INSERT INTO game_room_user (room_id,
                                    user_id,
                                    username,
                                    remark,
                                    create_user_id)
        SELECT #{entity.roomId},
               #{entity.userId},
               #{entity.username},
               #{entity.remark},
               #{entity.createUserId}
        WHERE NOT EXISTS(SELECT *
                         FROM game_room_user
                         WHERE room_id = #{entity.roomId}
                           AND user_id = #{entity.userId}
                           AND del_flag = 0)
          AND (SELECT ifnull(COUNT(*), 0) &lt;
                      #{size}
               FROM game_room_user
               WHERE room_id = #{entity.roomId}
                 AND del_flag = 0)
          AND (SELECT ifnull(COUNT(*), 0) = 0
               FROM game_room_user
               WHERE user_id =
                     #{entity.userId}
                 AND del_flag = 0)
    </insert>
    <delete id="quitGameRoom">
        delete
        from game_room_user
        WHERE user_id = #{userId}
    </delete>

    <select id="alreadyJoinByCreateUserId" resultType="cn.sbx0.microservices.uno.entity.GameRoomUserEntity">
        select id,
               room_id,
               user_id,
               username,
               remark,
               del_flag,
               create_user_id,
               create_time,
               update_user_id,
               update_time
        from game_room_user
        where user_id = #{id}
          and del_flag = 0
        order by update_time desc, create_time desc
        limit 1
    </select>
    <select id="listByGameRoom" resultType="cn.sbx0.microservices.uno.entity.GameRoomUserEntity">
        select any_value(id)             as id,
               any_value(room_id)        as room_id,
               user_id,
               any_value(username)       as username,
               any_value(remark)         as remark,
               del_flag,
               any_value(create_user_id) as create_user_id,
               create_time,
               any_value(update_user_id) as update_user_id,
               update_time
        from game_room_user
        where room_id = #{id}
          and del_flag = 0
        group by id
        order by id desc
        limit #{size}
    </select>
    <select id="countByGameRoom" resultType="java.lang.Integer">
        select count(*)
        from game_room_user
        where room_id = #{id}
          and del_flag = 0
    </select>
</mapper>
