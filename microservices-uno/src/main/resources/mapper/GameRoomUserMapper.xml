<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.sbx0.microservices.uno.mapper.GameRoomUserMapper">
    <insert id="atomSave">
        INSERT INTO game_room_user (room_id,
                                    user_id,
                                    username,
                                    remark,
                                    create_user_id)
        SELECT #{roomId},
               #{userId},
               #{username},
               #{remark},
               #{createUserId} WHERE NOT EXISTS(SELECT * FROM game_room_user WHERE room_id = 1 AND user_id = 1 AND del_flag = 0)
    </insert>
    <update id="quitGameRoom">
        UPDATE game_room_user
        SET del_flag = 1
        WHERE user_id = #{userId}
    </update>

    <select id="alreadyJoinByCreateUserId" resultType="cn.sbx0.microservices.uno.entity.GameRoomUserEntity">
        select id,
               room_id,
               user_id,
               username,
               remark,
               del_flag,
               create_user_id,
               create_time,
               update_user_id,
               update_time
        from game_room_user
        where user_id = #{id}
          and del_flag = 0
        order by update_time desc, create_time desc limit 1
    </select>
    <select id="listByGameRoom" resultType="cn.sbx0.microservices.uno.entity.GameRoomUserEntity">
        select any_value(id)             as id,
               any_value(room_id)        as room_id,
               user_id,
               any_value(username)       as username,
               any_value(remark)         as remark,
               del_flag,
               any_value(create_user_id) as create_user_id,
               create_time,
               any_value(update_user_id) as update_user_id,
               update_time
        from game_room_user
        where room_id = #{id}
          and del_flag = 0
        group by user_id, update_time, create_time
        order by update_time desc, create_time desc
            limit #{size}
    </select>
</mapper>
