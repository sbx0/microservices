version: '3.7'

services:

  mysql:
    image: mysql:latest
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: test
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 500m

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass test
    restart: always
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 300m

  microservices-registry:
    build:
      context: ./microservices-registry
      dockerfile: Dockerfile
    restart: always
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 300m
    environment:
      REGION:
      VERSION:
      REGISTRY_URL:
      SECURITY_NAME:
      SECURITY_PASSWORD:
      CONFIG_URL:
      HOST_CONFIG_LOCATION:
      CONFIG_LOCATION:
      REDIS_HOST:
      REDIS_PORT:
      REDIS_PASSWORD:
      DB_URL:
      DB_USERNAME:
      DB_PASSWORD:
      REGISTRY_PORT:
      REGISTRY_PROFILES:
      IP_ADDRESS:

  microservices-configuration:
    build:
      context: ./microservices-configuration
      dockerfile: Dockerfile
    volumes:
      - $HOST_CONFIG_LOCATION:$CONFIG_LOCATION
    restart: always
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 300m
    environment:
      WAIT_HOSTS: wsl2.sbx0.cn:8761
      REGION:
      VERSION:
      REGISTRY_URL:
      SECURITY_NAME:
      SECURITY_PASSWORD:
      CONFIG_URL:
      HOST_CONFIG_LOCATION:
      CONFIG_LOCATION:
      REDIS_HOST:
      REDIS_PORT:
      REDIS_PASSWORD:
      DB_URL:
      DB_USERNAME:
      DB_PASSWORD:
      CONFIGURATION_PORT:
      CONFIGURATION_PROFILES:
      IP_ADDRESS:

  #  microservices-gateway:
  #    build:
  #      context: ./microservices-gateway
  #      dockerfile: Dockerfile
  #    depends_on:
  #      microservices-configuration:
  #        condition: service_healthy
  #      microservices-registry:
  #        condition: service_healthy
  #    network_mode: "host"
  #    deploy:
  #      resources:
  #        limits:
  #          memory: 300m
  #    environment:
  #      REGION:
  #      VERSION:
  #      REGISTRY_URL:
  #      SECURITY_NAME:
  #      SECURITY_PASSWORD:
  #      CONFIG_URL:
  #      HOST_CONFIG_LOCATION:
  #      CONFIG_LOCATION:
  #      REDIS_HOST:
  #      REDIS_PORT:
  #      REDIS_PASSWORD:
  #      DB_URL:
  #      DB_USERNAME:
  #      DB_PASSWORD:
  #      GATEWAY_PORT:
  #      GATEWAY_PROFILES:
  #      NEXT_URL:
  #      IP_ADDRESS:

  microservices-account:
    build:
      context: ./microservices-account
      dockerfile: Dockerfile
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 400m
    depends_on:
      - microservices-registry
      - microservices-configuration
    environment:
      WAIT_HOSTS: wsl2.sbx0.cn:8761, wsl2.sbx0.cn:8888
      REGION:
      VERSION:
      REGISTRY_URL:
      SECURITY_NAME:
      SECURITY_PASSWORD:
      CONFIG_URL:
      HOST_CONFIG_LOCATION:
      CONFIG_LOCATION:
      REDIS_HOST:
      REDIS_PORT:
      REDIS_PASSWORD:
      DB_URL:
      DB_USERNAME:
      DB_PASSWORD:
      ACCOUNT_PORT:
      ACCOUNT_PROFILES:
      IP_ADDRESS:

  microservices-uno:
    build:
      context: ./microservices-uno
      dockerfile: Dockerfile
    network_mode: "host"
    deploy:
      resources:
        limits:
          memory: 500m
    depends_on:
      - microservices-registry
      - microservices-configuration
    environment:
      WAIT_HOSTS: wsl2.sbx0.cn:8761, wsl2.sbx0.cn:8888
      REGION:
      VERSION:
      REGISTRY_URL:
      SECURITY_NAME:
      SECURITY_PASSWORD:
      CONFIG_URL:
      HOST_CONFIG_LOCATION:
      CONFIG_LOCATION:
      REDIS_HOST:
      REDIS_PORT:
      REDIS_PASSWORD:
      DB_URL:
      DB_USERNAME:
      DB_PASSWORD:
      UNO_PORT:
      UNO_PROFILES:
      IP_ADDRESS:
